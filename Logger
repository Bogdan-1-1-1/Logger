package usefulClasses;

public class Logger {

    private static Logger instance;             //реализуем паттерн Singleton
    public static Logger getInstance() {        //
        if(instance == null) {                  //
            instance = new Logger();            //
        }                                       //
        return instance;                        //
    }
    private Logger() { }

    public static enum LogLevels  {ALL, DEBUG , INFO, TAG, ERROR, FATAL}
    LogLevels logLevel = LogLevels.ALL;

    private void log(String tag, String message) {
        System.out.println(tag +": ["+ message + "]");
    }

    public void error(String message) {
        if(logLevel != LogLevels.TAG && logLevel != LogLevels.FATAL)
            log("ERROR", message);
    }
    public void info(String message) {
        if(logLevel == LogLevels.ALL || logLevel == LogLevels.DEBUG || logLevel == LogLevels.INFO)
            log("INFO", message);
    }
    public void fatal(String message) {
        if(logLevel != LogLevels.TAG && logLevel != LogLevels.ERROR && logLevel != LogLevels.INFO)
            log("FATAL",  message );
    }
    public void tag(String message) {
        if(logLevel == LogLevels.TAG || logLevel == LogLevels.ALL)
        log("TAG", message );
    }
    public void setLogLevel(LogLevels logLevel) {
        this.logLevel = logLevel;
    }
}
